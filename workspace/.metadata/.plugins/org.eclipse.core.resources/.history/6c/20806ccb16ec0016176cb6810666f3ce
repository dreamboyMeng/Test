package cs56pa2;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

public class HotWordsAnalyzer {
   
	// hotWordFrequency maps lower case hot words to its number of occurrences in the doc file.
    public static HashMap<String, Integer> hotWordFrequency = new HashMap<String, Integer>();
    
    // hotWordOriginal maps lower case hot words to its original form in the hot word file.
    public static HashMap<String, String> hotWordOriginal = new HashMap<String, String>();
    
    // docFile stores the contents in the doc file.
    public static List<String> docFile = new ArrayList<>();
    
    // hotWordsInDocFile stores all the hot words in the doc file in the order they appeared
    public static List<String> hotWordsInDocFile = new ArrayList<>();
    
    
    // constructor, which reads both files.
    public HotWordsAnalyzer (String hotWordsFileName, String docFileName) throws IOException {

    	// read the hot word file

        FileReader fileReader = new FileReader(hotWordsFileName);

        BufferedReader bufferedReader = new BufferedReader(fileReader);

        String thisLine = null;

        while ((thisLine = bufferedReader.readLine()) != null) {

            if (thisLine.length() != 0 && hotWordFrequency.get(thisLine.toLowerCase()) == null) {

                hotWordFrequency.put(thisLine.toLowerCase(), 0);
                hotWordOriginal.put(thisLine.toLowerCase(), thisLine);

            }

        }
        
        bufferedReader.close();
        fileReader.close();

        // read the doc file

        fileReader = new FileReader(docFileName);

        bufferedReader = new BufferedReader(fileReader);

        thisLine = null;

        while ((thisLine = bufferedReader.readLine()) != null) {
        	
        	// read in each line in the doc file and split it into words based on the symbols " ,.:;()\n'""
            for (String w : thisLine.split("[\\s+,+\\.+:+;+(+)+\\n+\\'+\\\"+]+")) {

                if (w.length() > 0)  // to eliminate " "

                    docFile.add(w);

            }

        }
        
        bufferedReader.close();
        fileReader.close();
    }

    public int count() {

        int numHotWords = 0;
        
        for (String w : docFile) {
            
        	// check whether w is a hot word and add one to numHotWords if it is.
            if (hotWordFrequency.containsKey(w.toLowerCase()) == true)
                numHotWords++;
            
        }

        return numHotWords;

    }
    
    
    
    public int count(String hotWord) {
        calculateFrequency();
        
        if (hotWordFrequency.containsKey(hotWord.toLowerCase()) == true)
            return hotWordFrequency.get(hotWord.toLowerCase());
        else
            return -1;
    }
    
    public int distinctCount() {        
        calculateFrequency();
        
        int distinct = 0;
    
        for (String key : hotWordFrequency.keySet()) {
            if (hotWordFrequency.get(key.toLowerCase()) != 0)
                distinct++;
        }
        
        return distinct;
    }
    
    public String[] nextHotWords(String hotWord) {
        extractHotWords();
        
        if ((hotWordsInDocFile.size() == 1) || (hotWordFrequency.get(hotWord.toLowerCase()) == null) || (hotWordFrequency.get(hotWord.toLowerCase()) == 0))
        	return null;
        
        int i = 0;
        
        List<String> result = new ArrayList<String>();
        
        while (i < hotWordsInDocFile.size()) {
        	if ((i+1 < hotWordsInDocFile.size()) && hotWordsInDocFile.get(i).toLowerCase().equals(hotWord.toLowerCase())) {
        		result.add(hotWordsInDocFile.get(i+1));
        	}
        	i++;
        }
        
        String[] ret = new String [result.size()];
            
        for (i = 0; i < result.size(); i++) {
            ret[i] = hotWordOriginal.get(result.get(i).toLowerCase());
        }
        return ret;
    }
    
    public String[] prevHotWords(String hotWord) {
        extractHotWords();
        
        if ((hotWordsInDocFile.size() == 1) || (hotWordFrequency.get(hotWord.toLowerCase()) == null) || (hotWordFrequency.get(hotWord.toLowerCase()) == 0))
        	return null;
        
        int i = 0;
        
        List<String> result = new ArrayList<String>();
        
        while (i < hotWordsInDocFile.size()) {
        	if ((i-1 >= 0) && hotWordsInDocFile.get(i).toLowerCase().equals(hotWord.toLowerCase())) {
        		result.add(hotWordsInDocFile.get(i-1));
        	}
        	i++;
        }
        
        String[] ret = new String [result.size()];
        
        for (i = 0; i < result.size(); i++) {
        	ret[i] = hotWordOriginal.get(result.get(i).toLowerCase());
        }
        return ret;
        
        
    }
    
    public String[] topHotWords(int count) {
        if (count <= 0) {
            count = 1;
        } else if (count > distinctCount()){
            count = distinctCount();
        }
        
        calculateFrequency();
        extractHotWords();
        
        // convert the hash map into a tree map to sort
        TreeMap<String, Integer> hotWordTreeMap = new TreeMap<String, Integer>(new myComparator());
        hotWordTreeMap.putAll(hotWordFrequency);
        
        List<Map.Entry<String, Integer>> mapToList = new ArrayList<Map.Entry<String, Integer>>(hotWordTreeMap.entrySet());
        String[] result = new String[count];
        for (int i = 0; i < count; i++) {
            result[i] = hotWordOriginal.get(mapToList.get(i).getKey());
        }
        
        return result.length != 0 ? result : null;
    }
    
    private class myComparator implements Comparator<String>{
        
        @Override
        public int compare(String s1, String s2) {
            s1 = s1.toLowerCase();
            s2 = s2.toLowerCase();
            
            if(HotWordsAnalyzer.hotWordFrequency.get(s1) > HotWordsAnalyzer.hotWordFrequency.get(s2)){
                return -1;
            }else if (HotWordsAnalyzer.hotWordFrequency.get(s1) < HotWordsAnalyzer.hotWordFrequency.get(s2)){
                return 1;
            } else if (HotWordsAnalyzer.find(s1) < HotWordsAnalyzer.find(s2)){
                return -1;
            } else
                return 1;
        }
    }

    
    public static void main(String[] args) throws IOException{

        HotWordsAnalyzer A = new HotWordsAnalyzer("paHotWord.txt", "paTest.txt");
        int x = A.count();
        x = A.count("");
        //x = A.distinctCount();
        System.out.println(x);

        String[] B = A.nextHotWords("xml");
        B = A.prevHotWords("xml");
        //int y = HotWordsAnalyzer.find("in");
        //System.out.println(y);
        
        //B = A.prevHotWords("in");
        
        B = A.topHotWords(2);
        
        if(B == null)
        	System.out.println("Null");
        else 
        	print(B);
        
        boolean con;
        con = A.consecutive("Xml","XSL");
        System.out.println(con);
        con = A.consecutive("XSL","XSl");
        System.out.println(con);
        con = A.consecutive("system","XSL");
        System.out.println(con);
        con = A.consecutive("system","design","XML");
        System.out.println(con);
        con = A.consecutive("XML","system","design");
        System.out.println(con);
     }
    
    public static void print(String[] S) {
        for (int i = 0; i < S.length; i++) {
            System.out.println(S[i]);
        }
    }
    
    public static int find(String s) {
        int i = 0;
        while (i < hotWordsInDocFile.size() && !hotWordsInDocFile.get(i).toLowerCase().equals(s))
            i++;
        
        return i;
    }
    
    public static List<Integer> findAll(String s) {
        List<Integer> index = new ArrayList<>(); 
        int i = 0;
        while (i < hotWordsInDocFile.size()) {
            if (hotWordsInDocFile.get(i).toLowerCase().equals(s.toLowerCase()))
                index.add(i);
            i++;
        }
        return index;
    }
    
    public boolean consecutive(String... hotWords) {
        
        // find each one of the hotWords[0]. and then check the words behind.
    	
    	List<Integer> index = new ArrayList<>(); 
    	
    	if (hotWords.length == 1 || hotWords.length == 0) {
    		return false;
    	} else {
    		index = findAll(hotWords[0]);
            
            if (index.size() == 0 ) {
                return false;
            } else if (index.get(0) + hotWords.length - 1 > hotWordsInDocFile.size() - 1) {
                return false;
            }
    	}

        for (int i = 0; i < index.size(); i++) {
            if (index.get(i) + hotWords.length - 1 < hotWordsInDocFile.size()) {
            	 boolean answer = true;
            	 
                // check whether the words match
                for (int j = 0; j < hotWords.length; j++) {
                    if (!hotWords[j].toLowerCase().equals(hotWordsInDocFile.get(j + index.get(i)).toLowerCase()))
                        answer = false;
                }
                if (answer == true) 
                    return true;
            } 
        }
        return false;
    }

    private void calculateFrequency() {
        for (String w : docFile) {
            
            if (hotWordFrequency.containsKey(w.toLowerCase()) == true)
                hotWordFrequency.replace(w.toLowerCase(), hotWordFrequency.get(w.toLowerCase()), hotWordFrequency.get(w.toLowerCase())+1);
            
        }
    }
    
    private void extractHotWords() {
    	
    	// if we have extracted hot words in the other methods, then we don't do it again.
        if (hotWordsInDocFile.size() != 0)
            return;
        
        for (String w : docFile) {
            if (hotWordFrequency.containsKey(w.toLowerCase()) == true) {
                hotWordsInDocFile.add(w);
            }
        }
    }
}




