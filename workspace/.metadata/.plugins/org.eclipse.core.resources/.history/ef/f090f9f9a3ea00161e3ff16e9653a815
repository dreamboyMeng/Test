package cs56pa2;

import java.awt.print.Printable;
import java.io.BufferedReader;

import java.io.FileNotFoundException;

import java.io.FileReader;

import java.io.IOException;

import java.io.InputStream;

import java.util.ArrayList;

import java.util.Enumeration;
import java.util.HashMap;
import java.util.Hashtable;

import java.util.List;

import java.util.Scanner;


import javax.sound.midi.VoiceStatus;
import javax.swing.text.StyledEditorKit.ForegroundAction;
import javax.xml.ws.Holder;


public class HotWordsAnalyzer {

	

	// count returns the total number of hot words in the document

	
	private HashMap<String, Integer> hotWordFrequency = new HashMap<String, Integer>();
	
	private List<String> docFile = new ArrayList<>();
	
	private List<String> hotWordsInDocFile = new ArrayList<>();
	
	
	public HotWordsAnalyzer (String hotWordsFileName, String docFileName) throws IOException {

		Scanner input = new Scanner(System.in);

		FileReader fileReader = new FileReader(hotWordsFileName);

		BufferedReader bufferedReader = new BufferedReader(fileReader);

		String thisLine = null;

		

		// read in the file of hot words and store them in a hash table. 

		

		while ((thisLine = bufferedReader.readLine()) != null) {

			if (hotWordFrequency.get(thisLine) == null && thisLine.length() != 0) {

				hotWordFrequency.put(thisLine.toLowerCase(), 0);

			}

		}
		
		bufferedReader.close();
		fileReader.close();
		

		// read in the doc file and store all the words in an array of strings.

		fileReader = new FileReader(docFileName);

		bufferedReader = new BufferedReader(fileReader);

		

		thisLine = null;

		while ((thisLine = bufferedReader.readLine()) != null) {

			thisLine.replaceAll("[\\s+,+.+:+;+(+)+\\n+\'+\"+]+", "!");

			for (String w: thisLine.split("[\\s+,+\\.+:+;+(+)+\\n+\\'+\\\"+]+",0)) {

				if (w.length() > 0)

					docFile.add(w);

			}

		}
		
		bufferedReader.close();
		fileReader.close();
		

		//test reading the hot words

		for (String key : hotWordFrequency.keySet()) {
			System.out.println(key);
		}

		

		// test reading the doc file

		for (String temp : docFile) {

			System.out.println(temp);

		}

	}

	

	public int count() {

		int numHotWords = 0;
		
		for (String w : docFile) {
			
			if (hotWordFrequency.containsKey(w.toLowerCase()) == true)
				numHotWords++;
			
		}

		return numHotWords;

	}
	
	private void calculateFrequency() {
		for (String w : docFile) {
			
			if (hotWordFrequency.containsKey(w.toLowerCase()) == true)
				hotWordFrequency.replace(w.toLowerCase(), hotWordFrequency.get(w.toLowerCase()), hotWordFrequency.get(w.toLowerCase())+1);
			
		}
	}
	
	private void extractHotWords() {
		for (String w : docFile) {
			if (hotWordFrequency.containsKey(w.toLowerCase()) == true) {
				hotWordsInDocFile.add(w);
			}
		}
	}
	
	public int count(String hotWord) {
		calculateFrequency();
		
		if (hotWordFrequency.containsKey(hotWord.toLowerCase()) == true)
			return hotWordFrequency.get(hotWord.toLowerCase());
		else 
			return -1;
	}
	
	public int distinctCount() {		
		calculateFrequency();
		
		int distinct = 0;
	
		for (String key : hotWordFrequency.keySet()) {
			if (hotWordFrequency.get(key.toLowerCase()) != 0)
				distinct++;
		} 
		
		return distinct;
	}
	
	public String[] nextHotWords(String hotWord) {
		extractHotWords();
		
		int i = 0;
		while (hotWordsInDocFile.get(i).toLowerCase() != hotWord.toLowerCase() && i < hotWordsInDocFile.size()) 
			i++;
		
		if (i == hotWordsInDocFile.size()) {
			return null;
		} else {
			List<String> result = hotWordsInDocFile.subList(i+1, hotWordsInDocFile.size());
			String [] ret = new String [result.size()];
			
			for (i = 0; i < result.size(); i++) {
				ret[i] = result.get(i);
				i++;
			}
			return ret;
		}
	}
	
	public String[] prevHotWords(String hotWord) {
		extractHotWords();
		
		int i = 0;
		while (hotWordsInDocFile.get(i).toLowerCase() != hotWord.toLowerCase()) 
			i++;
		
		if (i == 0) {
			return null;
		} else {
			List<String> result = hotWordsInDocFile.subList(0, i);
			String [] ret = new String [result.size()];
			
			i = 0;
			for (String w : result) {
				ret[i] = w;
				i++;
			}
			return ret;
		}
	}
	

	public static void main(String[] args) throws IOException{

		HotWordsAnalyzer A = new HotWordsAnalyzer("myHotWord.txt", "myTest.txt");
		int x = A.count();
		x = A.count("Good");
		x = A.distinctCount();
		System.out.println(x);
		A.extractHotWords();
		
		
		
		A.nextHotWords("good");
		System.out.print(2);
//		String[] B = new String[20]; 
//		
//		String hW = "good";
//		for (int i = 0; i < A.nextHotWords(hW).length; i++) {
//			B[i] = A.nextHotWords(hW)[i];
//		}
		
		//print();
 	}
	
	public static void print(String[] S) {
		for (int i = 0; i < S.length; i++) {
			System.out.println(S[i]);
		}
	}
}
